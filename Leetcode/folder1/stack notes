
Stack are last in first out data structures.In this ,both deletion and addition of element take place
at only one end.

they have following functions :-

1. push : - used to add element at top of the stack.

2. pop :- used to remove the element at top  of stack.

3. top() :- used to give value of top element of the stack.

4. empty() :- used to check whether given stack is empty or not.

5. swap() :- is used to swap the elements of two stacks.

  example :-  contents of the stack from top to bottom are
				Input  : mystack1 = {4, 3, 2, 1}
				         mystack2 = {9, 7 ,5, 3}
				         mystack1.swap(mystack2);
				Output : mystack1 =  9, 7, 5, 3
				         mystack2 =  4, 3, 2, 1

				Input  : mystack1 = {7, 5, 3, 1}
				         mystack2 = {8, 6, 4, 2}
				         mystack1.swap(mystack2);
				Output : mystack1 =  8, 6, 4, 2
				         mystack2 =  7, 5, 3, 1

6. size() :- used to tell the size of the stack.

7. emplace() :- used to insert element at top of the stack.


Note :-

Stack unwinding is the process of  removing function entries from function call stack at run time is called Stack Unwinding. Stack Unwinding is generally related to Exception Handling. In C++, when an exception occurs, the function call stack is linearly searched for the exception handler, and all the entries before the function with exception handler are removed from the function call stack. So exception handling involves Stack Unwinding if exception is not handled in same function (where it is thrown).

Note :-

Difference between stack::emplace() and stack::push() function.
While push() function inserts a copy of the value or the parameter passed to the function into the container at the top, the emplace() function constructs a new element as the value of the parameter and then adds it to the top of the container.



Note :- in c++, stl container (data structure like stack,vector,queue etc) can be given in function by value and by reference.
If they are passed by value, then their copy is passed . Then any modification in passed data structure  in function , donot affect original data structure. But , if they are passed by value ,then any modification in function will affect original data structures. 